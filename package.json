{
  "name": "grunt-split",
  "version": "0.1.1",
  "description": "Grunt plugin that lets you break up your Gruntfile by feature",
  "main": "lib/grunt-split-loader.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nemesarial/grunt-split.git"
  },
  "keywords": [
    "gruntplugin"
  ],
  "author": {
    "name": "Mark Holtzhausen <nemesarial@gmail.com>"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nemesarial/grunt-split/issues"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "lodash" : "~2.4.1",
    "glob": "~3.2.6"
  },
  "readme": "#grunt-split\n\nGrunt plugin that lets you split your gruntfile configuration into multiple files. You are not limited to defining one task per configuration file. Each file extends the configuration object meaning each file can contain a slice of the full configuration stack. This is particularly useful if you distribute a seed project in which you want separate features to be enabled or disabled from the build process.\n\n##Features\n\n- Each configuration file can contain any number of task configurations.\n\n##Merge Conflict Resolution\nIt is useful knowing how the objects read from the different files get extended when a conflict is encountered\n\n###Object Properties get overridden\n```javascript\n// File 1\nobj={\n  key1:'value1'\n}\n\n// File 2\nobj={\n  key1:'value2',\n  key2:'value2'\n}\n\n// Results In\nobj={\n  key1:'value2',\n  key2:'value2'\n}\n```\n\n###Array Properties get augmented\n```javascript\n// File 1\nobj={\n key1:['value1']\n}\n\n// File 2\nobj={\n  key1:['value2']\n}\n\n// Results In\nobj={\n  key1:['value1','value2'],\n}\n```\n\n\n##Installation\n\n`npm install -D grunt-split`\n\n##Example\n\n```javascript\nmodule.exports = function(grunt) {\n\n require('grunt-split')(grunt,{\n      files:[\n       'grunt/bootstrap.conf.js',\n      //  'grunt/angular.conf.js',\n        'grunt/font-awesome.conf.js',\n     ]\n   });\n\n};\n```\n\ngrunt/bootstrap.conf.js\n```javascript\nmodule.exports = {\n  npm_tasks:[\n   'grunt-contrib-concat',\n   'grunt-contrib-watch',\n    'grunt-contrib-less'\n  ],\n  config:{\n    less:{\n      bootstrap:{\n       //bootstrap less compilation configuration goes here\n      }\n   },\n    concat:{\n      bootstrap:{\n     //concatenate any css and javascript here\n     }\n   },\n    watch:{\n     bootstrap:{\n       //instructions on what to watch\n     }\n   }\n },\n  aliasses:{\n    'watch_all',['watch:bootstrap']\n }\n}\n```\n\n##Alternative Implementation\nThere is an alternative implementation that allows one to send parameters from the calling grunt file to all the includes.\n\n```javascript\nmodule.exports = function(grunt) {\n\n  require('grunt-split')(grunt,{\n      files:[\n       'grunt/bootstrap.conf.js',\n      //  'grunt/angular.conf.js',\n        'grunt/font-awesome.conf.js',\n     ]\n   },parameters);\n\n};\n```\n\ngrunt/bootstrap.conf.js\n```javascript\nmodule.exports = function(parameters){\n var config={\n    npm_tasks:[\n     'grunt-contrib-concat',\n     'grunt-contrib-watch',\n      'grunt-contrib-less'\n    ],\n    config:{\n      less:{\n        bootstrap:{\n         //bootstrap less compilation configuration goes here\n                                  //use parameters here\n       }\n     },\n      concat:{\n        bootstrap:{\n       //concatenate any css and javascript here\n       }\n     },\n      watch:{\n       bootstrap:{\n         //instructions on what to watch\n       }\n     }\n   },\n    aliasses:{\n      'watch_all',['watch:bootstrap']\n   }\n };\n\n  return config;\n}\n```\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nemesarial/grunt-split",
  "_id": "grunt-split@0.1.0"
}
